/*
	Generated by KBEngine!
	Please do not modify this file!
	Please inherit this module, such as: (class Account : AccountBase)
	tools = kbcmd
*/

namespace KBEngine
{
	using UnityEngine;
	using System;
	using System.Collections;
	using System.Collections.Generic;

	// defined in */scripts/entity_defs/Account.def
	public abstract class AccountBase : Entity
	{
		public EntityBaseMailbox_AccountBase baseMailbox = null;
		public EntityCellMailbox_AccountBase cellMailbox = null;

		public UInt32 RoleLevel = 1;
		public virtual void onRoleLevelChanged(UInt32 oldValue) {}
		public string RoleName = "";
		public virtual void onRoleNameChanged(string oldValue) {}
		public UInt16 RoleType = 0;
		public virtual void onRoleTypeChanged(UInt16 oldValue) {}

		public abstract void ReCreateAccountResponse(Int32 arg1); 
		public abstract void ReRoomInfoResponse(); 

		public override void onGetBase()
		{
			baseMailbox = new EntityBaseMailbox_AccountBase();
			baseMailbox.id = id;
			baseMailbox.className = className;
		}

		public override void onGetCell()
		{
			cellMailbox = new EntityCellMailbox_AccountBase();
			cellMailbox.id = id;
			cellMailbox.className = className;
		}

		public override void onLoseCell()
		{
			cellMailbox = null;
		}

		public override EntityMailbox getBaseMailbox()
		{
			return baseMailbox;
		}

		public override EntityMailbox getCellMailbox()
		{
			return cellMailbox;
		}

		public override void onRemoteMethodCall(Method method, MemoryStream stream)
		{
			switch(method.methodUtype)
			{
				case 3:
					Int32 ReCreateAccountResponse_arg1 = stream.readInt32();
					ReCreateAccountResponse(ReCreateAccountResponse_arg1);
					break;
				case 4:
					ReRoomInfoResponse();
					break;
				default:
					break;
			};
		}

		public override void onUpdatePropertys(Property prop, MemoryStream stream)
		{
			switch(prop.properUtype)
			{
				case 3:
					UInt32 oldval_RoleLevel = RoleLevel;
					RoleLevel = stream.readUint32();

					if(prop.isBase())
					{
						if(inited)
							onRoleLevelChanged(oldval_RoleLevel);
					}
					else
					{
						if(inWorld)
							onRoleLevelChanged(oldval_RoleLevel);
					}

					break;
				case 2:
					string oldval_RoleName = RoleName;
					RoleName = stream.readUnicode();

					if(prop.isBase())
					{
						if(inited)
							onRoleNameChanged(oldval_RoleName);
					}
					else
					{
						if(inWorld)
							onRoleNameChanged(oldval_RoleName);
					}

					break;
				case 1:
					UInt16 oldval_RoleType = RoleType;
					RoleType = stream.readUint16();

					if(prop.isBase())
					{
						if(inited)
							onRoleTypeChanged(oldval_RoleType);
					}
					else
					{
						if(inWorld)
							onRoleTypeChanged(oldval_RoleType);
					}

					break;
				case 40001:
					Vector3 oldval_direction = direction;
					direction = stream.readVector3();

					if(prop.isBase())
					{
						if(inited)
							onDirectionChanged(oldval_direction);
					}
					else
					{
						if(inWorld)
							onDirectionChanged(oldval_direction);
					}

					break;
				case 40000:
					Vector3 oldval_position = position;
					position = stream.readVector3();

					if(prop.isBase())
					{
						if(inited)
							onPositionChanged(oldval_position);
					}
					else
					{
						if(inWorld)
							onPositionChanged(oldval_position);
					}

					break;
				case 40002:
					UInt32 spaceID = stream.readUint32();
					spaceID = 0;
					break;
				default:
					break;
			};
		}

		public override void callPropertysSetMethods()
		{
			ScriptModule sm = EntityDef.moduledefs[className];
			Dictionary<UInt16, Property> pdatas = sm.idpropertys;

			UInt32 oldval_RoleLevel = RoleLevel;
			Property prop_RoleLevel = pdatas[3];
			if(prop_RoleLevel.isBase())
			{
				if(inited && !inWorld)
					onRoleLevelChanged(oldval_RoleLevel);
			}
			else
			{
				if(inWorld)
				{
					if(prop_RoleLevel.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onRoleLevelChanged(oldval_RoleLevel);
					}
				}
			}

			string oldval_RoleName = RoleName;
			Property prop_RoleName = pdatas[4];
			if(prop_RoleName.isBase())
			{
				if(inited && !inWorld)
					onRoleNameChanged(oldval_RoleName);
			}
			else
			{
				if(inWorld)
				{
					if(prop_RoleName.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onRoleNameChanged(oldval_RoleName);
					}
				}
			}

			UInt16 oldval_RoleType = RoleType;
			Property prop_RoleType = pdatas[5];
			if(prop_RoleType.isBase())
			{
				if(inited && !inWorld)
					onRoleTypeChanged(oldval_RoleType);
			}
			else
			{
				if(inWorld)
				{
					if(prop_RoleType.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onRoleTypeChanged(oldval_RoleType);
					}
				}
			}

			Vector3 oldval_direction = direction;
			Property prop_direction = pdatas[1];
			if(prop_direction.isBase())
			{
				if(inited && !inWorld)
					onDirectionChanged(oldval_direction);
			}
			else
			{
				if(inWorld)
				{
					if(prop_direction.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onDirectionChanged(oldval_direction);
					}
				}
			}

			Vector3 oldval_position = position;
			Property prop_position = pdatas[0];
			if(prop_position.isBase())
			{
				if(inited && !inWorld)
					onPositionChanged(oldval_position);
			}
			else
			{
				if(inWorld)
				{
					if(prop_position.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPositionChanged(oldval_position);
					}
				}
			}

		}
	}
}